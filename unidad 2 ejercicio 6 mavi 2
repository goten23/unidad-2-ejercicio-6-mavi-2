import pygame
from Box2D import b2

# Configuración de Pygame
PPM = 32  # Píxeles por metro
TARGET_FPS = 60
TIME_STEP = 1.0 / TARGET_FPS

# Configuración del mundo Box2D
world = b2.world(gravity=(0, -10), doSleep=True)

# Dimensiones de la pantalla
SCREEN_WIDTH, SCREEN_HEIGHT = 800, 600

# Crear el suelo
ground_body = world.CreateStaticBody(
    position=(0, 0),
    shapes=b2.polygonShape(box=(50, 1)),
)

# Función para crear el proyectil
def create_projectile(position):
    return world.CreateDynamicBody(
        position=position,
        fixtures=b2.fixtureDef(
            shape=b2.circleShape(radius=0.5),
            density=1.0,
            friction=0.3,
            restitution=0.3,
        ),
    )

# Configuración de Pygame
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
clock = pygame.time.Clock()

# Estado del juego
shooting = False
projectile = None

# Loop de simulación
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:  # Botón izquierdo del ratón
            if not shooting:
                shooting = True
                projectile = create_projectile((1, 2))  # Posición inicial del proyectil

    # Actualizar el estado del proyectil si se está disparando
    if shooting:
        # Apuntar hacia la posición del ratón
        mouse_position = pygame.mouse.get_pos()
        direction = (mouse_position[0] / PPM - projectile.position.x, (SCREEN_HEIGHT - mouse_position[1]) / PPM - projectile.position.y)
        direction /= b2.vec2(*direction).length

        # Aplicar fuerza hacia la dirección apuntada
        projectile.ApplyForceToCenter((direction[0] * 1000, direction[1] * 1000), True)

    # Avanzar la simulación en el tiempo
    world.Step(TIME_STEP, 6, 2)

    # Limpiar la pantalla
    screen.fill((255, 255, 255))

    # Dibujar el suelo
    ground_vertices = [(ground_body.transform * v) * PPM for v in ground_body.fixtures[0].shape.vertices]
    pygame.draw.polygon(screen, (0, 0, 0), ground_vertices)

    # Dibujar el proyectil si está disparando
    if shooting:
        projectile_position = projectile.position * PPM
        pygame.draw.circle(screen, (255, 0, 0), (int(projectile_position.x), SCREEN_HEIGHT - int(projectile_position.y)), 10)

    # Actualizar la pantalla
    pygame.display.flip()
    clock.tick(TARGET_FPS)

pygame.quit()
